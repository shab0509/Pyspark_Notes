lenovo@lenovo-Lenovo-G450:~$ cd Desktop
lenovo@lenovo-Lenovo-G450:~/Desktop$ cd kafka
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ ls
bin  config  libs  LICENSE  NOTICE  site-docs



step 1: start zookeeper (in one terminal) (port no: 2181)
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/zookeeper-server-start.sh config/zookeeper.properties

	at org.apache.zookeeper.server.NIOServerCnxnFactory.run(NIOServerCnxnFactory.java:203)
	we see this


step 2: start broker1(server) in one terminal



before starting broker(server), first check server.properties files

In server.properties file, we need to check or configure 4 things
1)broker1d=0, if only one broker, 
  
2)broker portno=9092 
3)logs
 
4)Zookeeper portno=2181 

lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ gedit config/server.properties
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ cat config/server.properties

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=0

# Switch to enable topic deletion or not, default value is false
#delete.topic.enable=true

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads handling network requests
num.network.threads=3

# The number of threads doing disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs=/tmp/kafka-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=localhost:2181

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000

----------------------------------------------------------------------------------------------------------------------------------------------

Starting the broker1:

lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-server-start.sh config/server.properties


[2017-09-14 15:16:25,584] INFO Kafka commitId : e89bffd6b2eff799 (org.apache.kafka.common.utils.AppInfoParser)
[2017-09-14 15:16:25,590] INFO [Kafka Server 0], started (kafka.server.KafkaServer)

---------------------------------------------------------------------------------------------------------------------------------------------
Now for 2nd broker, create one more server.properties file i.e server2.properties file

lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ cp config/server.properties config/server2.properties
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ nano config/server2.properties

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=1

# Switch to enable topic deletion or not, default value is false
#delete.topic.enable=true

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://localhost:9093
listeners=PLAINTEXT://:9093

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
#advertised.listeners=PLAINTEXT://your.host.name:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads handling network requests
num.network.threads=3

# The number of threads doing disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600


############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs=/tmp/kafka-logs2

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
# segments don't drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect=localhost:2181

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000




Now start the broker2:
novo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-server-start.sh config/server2.properties
.
.
.
.
.
.
[2017-09-15 13:49:11,363] INFO [Kafka Server 1], started (kafka.server.KafkaServer)






step 3: create topic(in one terminal)


lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 1 --topic mytopic3
Created topic "mytopic3".
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$


Note:here 2 brokers, so we can have 2 replicas
     no of replicas should be <= no of brokers



lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 2 --topic mytopic7
Created topic "mytopic7".
lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ 


step 4: start producer (in one terminal)


lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-console-producer.sh --broker-list localhost:9092,localhost:9093 --topic mytopic3
one
two 
three
four
five
six

here 6 messages,stored in topic-partition of lead replica, later written into other replica by lead replica broker

Here 2 brokers, with 2 replicas, always producer writes into lead replica,later the lead broker writes into other replica
if one broker down,but still other broker available, so other replica becomes the lead replica




step 5: start consumer (in one terminal)


lenovo@lenovo-Lenovo-G450:~/Desktop/kafka$ bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic mytopic3 --from-beginning
Using the ConsoleConsumer with old consumer is deprecated and will be removed in a future major release. Consider using the new consumer by passing [bootstrap-server] instead of [zookeeper].
one
two 
three
four
five
six


consumer doesnt know in which broker these partions are available,so zookeeper will help

one more event u generate by producer i.e "seven", immeadiately it is captured and observe in consumer..


step 6:kill broker1(server1) (ctrl+c)
.
.
.
.
[2017-09-15 14:21:04,917] INFO [Kafka Server 0], shut down completed (kafka.server.KafkaServer)

still broker2 is running
write 4 messages by producer(seven,eight,nine,ten)
one
two 
three
four
five
six
seven
eight
nine
ten


observe in consumer:
one
two 
three
four
five
six
[2017-09-15 14:21:02,285] ERROR [ConsumerFetcherThread-console-consumer-33449_lenovo-Lenovo-G450-1505465244078-611b337d-0-0], Error for partition [mytopic22,0] to broker 0:kafka.common.NotLeaderForPartitionException (kafka.consumer.ConsumerFetcherThread)
[2017-09-15 14:21:02,462] WARN Fetching topic metadata with correlation id 1 for topics [Set(mytopic22)] from broker [BrokerEndPoint(0,localhost,9092)] failed (kafka.client.ClientUtils$)
java.nio.channels.ClosedChannelException
	at kafka.network.BlockingChannel.send(BlockingChannel.scala:110)
	at kafka.producer.SyncProducer.liftedTree1$1(SyncProducer.scala:80)
	at kafka.producer.SyncProducer.kafka$producer$SyncProducer$$doSend(SyncProducer.scala:79)
	at kafka.producer.SyncProducer.send(SyncProducer.scala:124)
	at kafka.client.ClientUtils$.fetchTopicMetadata(ClientUtils.scala:60)
	at kafka.client.ClientUtils$.fetchTopicMetadata(ClientUtils.scala:95)
	at kafka.consumer.ConsumerFetcherManager$LeaderFinderThread.doWork(ConsumerFetcherManager.scala:68)
	at kafka.utils.ShutdownableThread.run(ShutdownableThread.scala:63)
seven
eight
nine
ten

Note:previously producer interacting with broker1(lead replica) but now interacting with broker2(now becomes lead replica) 
     from that consumer is reading

step 7: restarting broker1

who will be the leader now,------->replica2(broker2)
broker1------slave replica

-------------------------------------------------------------------------------------------------------
producer--->writes----->lead replica T1-P1-R1* -----slave1-->T1-P1-R2  Slave2---->T1-P1-R3


producer writes into lead replica and later these msgs are copied into slaves
ACK 0 ------>producer does not wait untill msgs written into slave replicas,it  waits untill msgs
             written into lead replica only and writes the next msg
ACK 1------->Producer waits untill msgs written into lead and slave replicas and writes the next msg

Ack -1-----> it keeps on writing msgs, it wont wait for either lead or slave replicas
----------------------------------------------------------------------------------------------------


This is single node,multi broker architecture
if node down then,everyting is lost , so go with multinode,multibroker architecture


ex:

Node1-b1  t1(p1-r1) * (master for p1)   t1(p2-r3) (slave for p2)

Node2-b2  t1(p1-r2)   (slave for p1)    t1(p2-r2) (slave for p2)

Node3-b3  t1(p1-r3)   (slave for p1)    t1(p2-r1)*(master for p2)













