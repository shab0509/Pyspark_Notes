Differences b/w reduceByKey() and groupByKey()

      reduceByKey()                            groupByKey

1.Performance is good when applied on    1.Performance is bad when applied on a single aggregation
  a single aggregation

2.Bad when applied on multiple aggregation 2.Performance is good when applied on multiple aggregations

3.Less load on aggregations               3.More load on aggregations

4.If the no of keys are more then         4.Here no n/w traffic.
  no of partitions will be more
  so more n/w traffic.
--------------------------------------------------------------------------------

Process of groupByKey()
ex:

1)sexsalpair=emparr.map(lambda x:(x(3),int(x[2]))
sexsalpair is a RDD divided into 2 partitions

o/p: [ (f,10),(f,20),(f,30),(m,10),             (m,40),(f,40),(m,20),(m,30)]
     <---partition1(slave1)------->              <----partition2(slave2)---->
here in each partition we can have multiple keys i.e m,f

but in reduceByKey, each partition has only one key i.e either  m (or) f

2)val grp=sexsalpair.groupByKey()
  <---partition1 slave1--------->      <---partition2  slave2------------->
  (f,iterator[10,20,30])                      (f,iterator[40])
  (m,iterator[10])                            (m,iterator[40,20,30]))

3)val sum=grp.map(x=>lambda x:(x[0],sum(x[1]))
   (f,60)                          (f,40)
   (m,10)                          (m,90)
 <---p1----->                    <---p2---->
 both will be collected into another machine(s3) and computed
              (f,Iterator[60,40])
              (m,Iterator[10,90])

Finally---->(f,100)
            (m,100)

here if we have more no of partitons(ex:10 partitions) then more load on aggregations
i.e sum,max,min,avg,cnt


------------------------------------------------------------------------------------------------
Process of reduceByKey():
1)sexsalpair=emparr.map(lambda x:(x[3],int(x[2])))
o/p: [ (f,10),(f,20),(f,30),(m,10),(m,40),(f,40),(m,20),(m,30)] 

2)val grp=sexsalpair.reduceByKey(lambda x,y:x+y)
o/p:
  [f <10,20,30,40>]            [m <10,20,30,40>]
 <---all females---->          <----all males----->
 <---partition1----->          <---partition2----->

3)grp.saveAsTextFile(......)
  since 2 keys------>2partitons--we get 2 part files
  1)part-00000----------->contains males---------->stored in one machine(s1)
  2)part-00001----------->contains females ------->stored in another machine(s2)

ex: If 100 products------>p1,p2,p3,..........p100
                   ------>then 100 keys
                   ------>then 100 part files i.e 100 output files
                   i.e file1 -----stores-------->produc1
                       file2------stores-------->product2
                       .
                       .
                       .
                       file100-----stores-------->product100
                    so 100partitions---stored in 100output files---->stored in 100 slave machines
                    so here n/w traffic is increased.


ex:for 1 Lakh products------->1 lakh partitions required
       so for each product, a machine can't be kept.

-------------------------------------------------------------------------------------------------





















