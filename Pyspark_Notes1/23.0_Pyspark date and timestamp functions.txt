

Pyspark SQL Functions
--------------------
pyspark Date and Timestamp functions

Datetype----------->default format is---------->yyyy-mm-dd
Timestamptype------>default format is---------->yyyy-mm-dd HH:mm:ss.SSSS

Date ans Time are very important if you are using pyspark for ETL

Pyspark SQL provides Several Date & TimeStamp functions

Pyspark Date functions

1.current_date() : Returns the current system date

from pyspark.sql import SparkSession
from pyspark.sql.functions import *

#Create Spark Session
spark=SparkSession.builder \
         .appName('DemoApp ') \
         .getOrCreate()

data=[["1","2022-02-01"],["2","2021-03-01"],["3","2023-03-01"]]
df=spark.createDataFrame(data,["id","date"])
df.show()

+---+----------+
| id|      date|
+---+----------+
|  1|2022-02-01|
|  2|2021-03001|
|  3|2023-03-01|
+---+----------+
-----------------------------------------------------------------------------------
1.current_date : Returns the current system date

df.select(current_date().alias("current_Date")).show(1)

+------------+
|current_Date|
+------------+
|  2024-03-17|
+------------+

---------------------------------------------------------------------------------
2. date_format(): converts date from yyyy-mm-dd  to MM-dd-yyyy format

df.select(col("date"),date_format(col("date"),"MM-dd--yyyy").alias("date_format")).show()

+----------+-----------+
|      date|date_format|
+----------+-----------+
|2022-02-01|02-01--2022|
|2021-03001|       null|
|2023-03-01|03-01--2023|
+----------+-----------+

-----------------------------------------------------------------------------------
3.to_date():converts string in date format yyyy-MM-dd to a DateType yyyy-MM-dd

df.select(col("date"),to_date(col("date"),"yyyy-MM-dd").alias("to_date")).show()

+----------+----------+
|      date|   to_date|
+----------+----------+
|2022-02-01|2022-02-01|
|2021-03001|      null|
|2023-03-01|2023-03-01|
+----------+----------+

-----------------------------------------------------------------------------------
4.datediff() :returns the difference between 2 dates
df.select(col("date"),datediff(current_date(),col("date")).alias("datediff")).show()

+----------+--------+
|      date|datediff|
+----------+--------+
|2022-02-01|     775|
|2021-03001|    null|
|2023-03-01|     382|
+----------+--------+

-----------------------------------------------------------------------------------
5.months_between():returns the months between 2 dates

df.select(col("date"),months_between(current_date(),col("date")).alias("months_between")).show()

+----------+--------------+
|      date|months_between|
+----------+--------------+
|2022-02-01|   25.51612903|
|2021-03001|          null|
|2023-03-01|   12.51612903|
+----------+--------------+

------------------------------------------------------------------------------------
6. add_months ,date_add(), date_sub():

adding and subtracting date and month fron a given input

df.select(col("date"),
          add_months(col("date"),3).alias("add_months"),
          add_months(col("date"),-3).alias("sub_months"),
          date_add(col("date"),4).alias("date_add"),
          date_sub(col("date"),4).alias("date_sub")).show()
          
+----------+----------+----------+----------+----------+
|      date|add_months|sub_months|  date_add|  date_sub|
+----------+----------+----------+----------+----------+
|2022-02-01|2022-05-01|2021-11-01|2022-02-05|2022-01-28|
|2021-03001|      null|      null|      null|      null|
|2023-03-01|2023-06-01|2022-12-01|2023-03-05|2023-02-25|
+----------+----------+----------+----------+----------+

-----------------------------------------------------------------------------------
7.year(),month(),next_day(),weekofyear()

df.select(col("date"),
          year(col("date")).alias("year"),
          month(col("date")).alias("month"),
          next_day(col("date"),"Sunday").alias("next_day"),
          weekofyear(col("date")).alias("weekofyear")).show()

+----------+----+-----+----------+----------+
|      date|year|month|  next_day|weekofyear|
+----------+----+-----+----------+----------+
|2022-02-01|2022|    2|2022-02-06|         5|
|2021-03001|null| null|      null|      null|
|2023-03-01|2023|    3|2023-03-05|         9|
+----------+----+-----+----------+----------+
-----------------------------------------------------------------------------------
8.dayofweek(),
  dayofmonth(),
  dayofyear()

df.select(col("date"),
          dayofweek(col("date")).alias("dayofweek"),
          dayofmonth(col("date")).alias("dayofmonth"),
          dayofyear(col("date")).alias("dayofyear")).show()

+----------+---------+----------+---------+
|      date|dayofweek|dayofmonth|dayofyear|
+----------+---------+----------+---------+
|2022-02-01|        3|         1|       32|
|2021-03001|     null|      null|     null|
|2023-03-01|        4|         1|       60|
+----------+---------+----------+---------+

-----------------------------------------------------------------------------------
9.hour(),
  Minute() and
  second()

data=[["1","2022-02-01 11:01:20.06"],["2","2021-03-01 12:02:19.50"],["3","2023-03-01 12:01:19.60"]]
df2=spark.createDataFrame(data,["id","date"])

df2.select(col("date"),
          hour(col("date")).alias("hour"),
          minute(col("date")).alias("minute"),
          second(col("date")).alias("second")).show()

+--------------------+----+------+------+
|                date|hour|minute|second|
+--------------------+----+------+------+
|2022-02-01 11:01:...|  11|     1|    20|
|2021-03-01 12:02:...|  12|     2|    19|
|2023-03-01 12:01:...|  12|     1|    19|
+--------------------+----+------+------+



































































